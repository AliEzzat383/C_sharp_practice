

public class Solution {
    public IList<IList<int>> FourSum(int[] nums, int target) {
        Array.Sort(nums);
        IList<IList<int>> res = new List<IList<int>>();

        for (int i = 0; i < nums.Length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            for (int j = i + 1; j < nums.Length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;

                int left = j + 1;
                int right = nums.Length - 1;

                while (left < right) {
                    long sum = (long)nums[i] + nums[j] + nums[left] + nums[right]; // Use long to avoid integer overflow

                    if (sum == target) {
                        res.Add(new List<int> { nums[i], nums[j], nums[left], nums[right] });
                        left++;
                        right--;

                        while (left < right && nums[left] == nums[left - 1]) left++;
                        while (left < right && nums[right] == nums[right + 1]) right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }

        return res;
    }
}
public class Program {
    public static void Main() {
        
        // int target=0;
        // int[] nums =[0,0,0,0]; //out:[[0,0,0,0],]
        // int target=8;
        // int[] nums =[2,2,2,2,2]; //out:[[2,2,2,2],]
        // int target=0;
        // int[] nums =[1,0,-1,0,-2,2]; //out:[[-2,1,2,-1],[-2,0,2,0],[-1,0,1,0],]
        // int target=1;
        // int[] nums =[-3,-1,0,2,4,5]; //out:[[-3,0,5,-1],]
        // int target=0;
        // int[] nums =[-2,-1,-1,1,1,2,2]; //out:[[-2,1,2,-1],[-1,1,1,-1],]
        int target=-294967296;
        int[] nums =[1000000000,1000000000,1000000000,1000000000]; //out:[[-3,-2,2,3],[-3,-1,1,3],[-3,0,0,3],[-3,0,1,2],[-2,-1,0,3],[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
        // int target=-1;
        // int[] nums =[-1,0,1,2,-1,-4]; //out:[[-4,0,1,2],[-1,-1,0,1],]
        Array.Sort(nums);
        // Console.WriteLine("["+string.Join(",", nums)+"]");
        Solution soln=new();
        IList<IList<int>> res=soln.FourSum(nums,target);
        Console.Write("[");
        foreach(IList<int> quad  in res)
        {
            Console.Write("["+string.Join(",", quad)+"]");
            Console.Write(",");
        }
        Console.WriteLine("]");
        // Console.WriteLine(Zzz.SubsetOf([[-2,1,2,-1],[-2,1,2,-1],[-1,1,1,-1]],[-1,1,1,-1]));
       

        // List<int> lst=new([-2,1,2,-1]);
        // Console.WriteLine(lst.Equals(lst));
        // Console.Write(i);
        
    }
}
// public class Solution {
//     public IList<IList<int>> FourSum(int[] nums, int target) {
//         Array.Sort(nums);
//         IList<IList<int>> res = new List<IList<int>>();

//         for (int i = 0; i < nums.Length - 3; i++) {
//             if (i > 0 && nums[i] == nums[i - 1]) continue;

//             for (int j = i + 1; j < nums.Length - 2; j++) {
//                 if (j > i + 1 && nums[j] == nums[j - 1]) continue;

//                 int left = j + 1;
//                 int right = nums.Length - 1;

//                 while (left < right) {
//                     long sum = (long)nums[i] + nums[j] + nums[left] + nums[right]; // Use long to avoid integer overflow

//                     if (sum == target) {
//                         res.Add(new List<int> { nums[i], nums[j], nums[left], nums[right] });
//                         left++;
//                         right--;

//                         while (left < right && nums[left] == nums[left - 1]) left++;
//                         while (left < right && nums[right] == nums[right + 1]) right--;
//                     } else if (sum < target) {
//                         left++;
//                     } else {
//                         right--;
//                     }
//                 }
//             }
//         }

//         return res;
//     }
// }